name: MacOS build

on: [push, pull_request]

jobs:
  build:

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: 
          - macos-latest
          - ubuntu-latest
          - windows-latest
        raku-release:
          - 2020.06-01
          - 2020.05.1-01
                
    steps:
         
    - uses: actions/checkout@v2
             
    - name: Set Raku install Path Unix format
#       if: ${{ ! startsWith(matrix.os, 'windows') }}
      run: |
        echo "::set-env name=RAKU_INSTALL_PATH::$HOME/raku-${{ matrix.raku-release }}"
        echo "::set-env name=RAKU_INSTALL_PATH_UX::$HOME/raku-${{ matrix.raku-release }}" 
      shell: bash

    - name: Set Raku install Path (Windows)
      if: ${{ startsWith(matrix.os, 'windows') }}
      run: |
        echo "::set-env name=RAKU_INSTALL_PATH::$HOME\raku-${{ matrix.raku-release }}" 
              
    - name: Check Cache
      id: my-cache
      uses: actions/cache@v2
      with:
        path: ${{ env.RAKU_INSTALL_PATH }}
        key: ${{ matrix.raku-release }}-x1
    
            # Convert windows path to Unix-style
            #InstallPath=$( echo ${{ env.RAKU_INSTALL_PATH }} | sed -e's#\\#/#g' -e's#^\(.\):#\L\1#')        
            #echo $InstallPath
            
    - name: Install Raku (Linux/MacOS)
      if: ${{ steps.my-cache.outputs.cache-hit != 'true' }}

#       if: ${{ ! startsWith(matrix.os, 'windows') && steps.my-cache.outputs.cache-hit != 'true' }}
      run: |
        mkdir -p ${{ env.RAKU_INSTALL_PATH }}
        if [[ "${{ matrix.os }}" = windows* ]]
        then
            RAKU_OS=win
        elif  [[ ${{ matrix.os }}" = ubuntu* ]]
        then
            RAKU_OS=linux   
            #InstallPath=${{ env.RAKU_INSTALL_PATH }}
        else
            RAKU_OS=macos
            #InstallPath=${{ env.RAKU_INSTALL_PATH }}            
        fi
        echo RAKU_OS=$RAKU_OS 
        wget -q https://rakudo.org/dl/rakudo/rakudo-moar-${{ matrix.raku-release }}-${RAKU_OS}-x86_64.tar.gz -O - | tar xzf - -C ${{ env.RAKU_INSTALL_PATH_UX }}
        ls ${{ env.RAKU_INSTALL_PATH_UX }}
      shell: bash
                
      
#     # Install zip for use in the test harness
#     - name: Install zip (Windows)
#       if: ${{ startsWith(matrix.os, 'windows') }}
#       run: |
#         choco install zip
#         zip -v
        
#     # Install unzip for use in the test harness  
#     - name: Install unzip (Windows)
#       if: ${{ startsWith(matrix.os, 'windows') }}      
#       run: |
#         choco install unzip
#         unzip -v
        
    - name: Get Path for Raku (Linux/MacOS)
      run: |
        cd ${{ env.RAKU_INSTALL_PATH }}
        BASE_RELEASE=$( ls )     
        echo "::set-env name=RAKU_BASE_PATH::$HOME/raku-${{ matrix.raku-release }}/$BASE_RELEASE"
      shell: bash

              
    - name: Set Path for Raku (Linux/MacOS)
      run: |        
        echo "::add-path::$RAKU_BASE_PATH/bin"
        echo "::add-path::$RAKU_BASE_PATH/share/perl6/site/bin"     
      shell: bash      
                
        
    - name: Raku short version
      run: raku -v
      shell: bash
 

    - name: Raku full version
      run: raku -V
      shell: bash


    - name: Install module dependencies
      if: steps.my-cache.outputs.cache-hit != 'true'
      run:  zef install --deps-only  .          
      shell: bash

              
    - name: Run module tests
      run:  zef test --verbose .
      shell: bash

        


